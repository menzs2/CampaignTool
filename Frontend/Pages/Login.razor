@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Shared.DTO;
@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage;


<h3>Login</h3>

<section class="login-form">
	<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group">
			<label for="email">Email:</label>
			<InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
			<ValidationMessage For="@(() => loginModel.Email)" />
		</div>

		<div class="form-group">
			<label for="password">Password:</label>
			<InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
			<ValidationMessage For="@(() => loginModel.Password)" />
		</div>

		<button type="submit">Login</button>
	</EditForm>
</section>

@code {
	private LoginRequestDto loginModel = new LoginRequestDto();

	private async Task HandleLogin()
	{
		try
		{
			var response = await HttpClient.PostAsJsonAsync($"{HttpClient.BaseAddress}api/auth/login", loginModel);
			response.EnsureSuccessStatusCode();
			var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
			await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", loginResponse?.Token);
			HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer",
			loginResponse?.Token);
			NavigationManager.NavigateTo("/");
			await SessionStorage.SetItemAsync<long?>("UserId", loginResponse?.User?.Id);
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("alert", $"Login failed: {ex.Message}");
		}
	}
}