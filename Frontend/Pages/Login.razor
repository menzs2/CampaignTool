@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Shared.DTO;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage;
@inject AuthenticationService AuthService;
@inject CustomAuthenticationStateProvider AuthenticationStateProvider;
<h3>Login</h3>

<section class="login-form">
	<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group">
			<label for="email">Email:</label>
			<InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
			<ValidationMessage For="@(() => loginModel.Email)" />
		</div>

		<div class="form-group">
			<label for="password">Password:</label>
			<InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
			<ValidationMessage For="@(() => loginModel.Password)" />
		</div>

		<button type="submit" class="btn btn-primary m-3">Login</button>

		<div class="guest-login  mt-3">
			<p>Or login as a guest:</p>
			<button type="button" class="btn btn-primary" @onclick="GuestLogin">Guest Login</button>
		</div>
	</EditForm>
</section>

@code {
	private LoginRequestDto loginModel = new LoginRequestDto();

	private async Task HandleLogin()
	{
		try
		{
			var loginResponse = await AuthService.LoginAsync(loginModel);
			if (loginResponse != null && loginResponse.Token != null)
			{
				await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", loginResponse.Token);
				await SessionStorage.SetItemAsync<long?>("UserId", loginResponse?.User?.Id);
				AuthenticationStateProvider.NotifyUserAuthentication(loginResponse.Token);
				NavigationManager.NavigateTo("/");
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("alert", $"Login failed: {ex.Message}");
		}
	}

	private async Task GuestLogin()
	{
		loginModel.Email = "guest@example.com";
		loginModel.Password = "guestpassword";
		await HandleLogin();
	}
}